{"version":3,"sources":["components/Filter-Option.js","App.constant.js","components/Filter.js","components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","FilterButton","button","FilterOption","props","useState","selected","setSelected","arr","query","map","item","onClick","onChange","handleButtonClick","style","backgroundColor","BOOLEAN_FILTER_ARR","QUERY_OPTIONS","Card","CardHeader","h3","CardSubHeader","h5","Filter","launchArr","setLaunchArr","selectedFilters","setSelectedFilters","useEffect","tempLaunchArr","i","push","handleFilterChange","data","combineObj","Object","assign","url","filters","queryStr","key","hasOwnProperty","constructAPIUrl","fetch","then","res","json","PageHeader","Homepage","respArr","setRespArr","App","className","HomePage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"glBAGA,IAAMA,EAAUC,IAAOC,IAAV,KAKPC,EAAeF,IAAOG,OAAV,KAqCHC,EA5BM,SAACC,GAAW,IAAD,EACEC,mBAAS,IADX,mBACvBC,EADuB,KACbC,EADa,KAEtBC,EAAeJ,EAAfI,IAAKC,EAAUL,EAAVK,MASb,OACE,kBAACX,EAAD,KACGU,EAAIE,KAAI,SAACC,GACR,OACE,kBAACV,EAAD,CACEW,QAAS,kBAZO,SAACD,GACzBJ,EAAYI,GACZP,EAAMS,SAAN,eACGJ,EAAQE,IASYG,CAAkBH,IACjCI,MAAO,CACLC,gBAAiBV,IAAaK,EAAO,UAAY,YAGlDA,QCtCAM,EAAqB,CAAC,OAAQ,SAE9BC,EACC,cADDA,EAEI,iBAFJA,EAGE,e,sXCAf,IAAMC,EAAOpB,IAAOC,IAAV,KAKJoB,EAAarB,IAAOsB,GAAV,KAGVC,EAAgBvB,IAAOwB,GAAV,KAiEJC,EA5DA,SAACpB,GAAW,IAAD,EACUC,mBAAS,IADnB,mBACjBoB,EADiB,KACNC,EADM,OAEsBrB,mBAAS,IAF/B,mBAEjBsB,EAFiB,KAEAC,EAFA,KAIxBC,qBAAU,WAER,IADA,IAAMC,EAAgB,GACbC,EAAI,KAAMA,GAAK,KAAMA,IAC5BD,EAAcE,KAAKD,GAErBL,EAAaI,KACZ,IAEH,IAYMG,EAAqB,SAACC,GAC1B,GAAIA,EAAM,CACR,IAAMC,EAAaC,OAAOC,OAAOV,EAAiBO,GAClDN,EAAmBO,GACnB,IAAMG,EAhBc,SAACC,GACvB,GAAIA,EAAS,CACX,IAAIC,EAAW,GACf,IAAK,IAAMC,KAAOF,EACZA,EAAQG,eAAeD,KACzBD,GAAQ,WAAQC,EAAR,YAAeF,EAAQE,KAGnC,MAAM,GAAN,OD9BkB,oDC8BlB,OAAqBD,IAQTG,CAAgBhB,GAC5BiB,MAAMN,GACHO,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACL3C,EAAMS,SAASkC,QAIvB,OACE,kBAAC5B,EAAD,KACE,kBAACC,EAAD,gBACA,kBAACE,EAAD,oBACA,kBAAC,EAAD,CACEd,IAAKiB,EACLhB,MAAOS,EACPL,SAAUoB,IAEZ,kBAACX,EAAD,0BACA,kBAAC,EAAD,CACEd,IAAKS,EACLR,MAAOS,EACPL,SAAUoB,IAEZ,kBAACX,EAAD,2BACA,kBAAC,EAAD,CACEd,IAAKS,EACLR,MAAOS,EACPL,SAAUoB,M,sNCrElB,IAAMnC,EAAUC,IAAOC,IAAV,KAIPgD,EAAajD,IAAOsB,GAAV,KAgBD4B,EAZE,WAAO,IAAD,EACS5C,mBAAS,IADlB,mBACd6C,EADc,KACLC,EADK,KAKrB,OACE,kBAAC,EAAD,KACE,kBAACH,EAAD,gCACA,kBAAC,EAAD,CAAQnC,SANU,SAACL,GACrB2C,EAAWD,QCHAE,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4d944676.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n`;\nconst FilterButton = styled.button`\n  width: 90px;\n  height: 35px;\n  border-radius: 10px;\n  margin: 10px;\n  border: none;\n  outline: none;\n`;\n\nconst FilterOption = (props) => {\n  const [selected, setSelected] = useState(\"\");\n  const { arr, query } = props;\n\n  const handleButtonClick = (item) => {\n    setSelected(item);\n    props.onChange({\n      [query]: item,\n    });\n  };\n\n  return (\n    <Wrapper>\n      {arr.map((item) => {\n        return (\n          <FilterButton\n            onClick={() => handleButtonClick(item)}\n            style={{\n              backgroundColor: selected === item ? \"#7cba01\" : \"#c5e09b\",\n            }}\n          >\n            {item}\n          </FilterButton>\n        );\n      })}\n    </Wrapper>\n  );\n};\nexport default FilterOption;\n","export const BOOLEAN_FILTER_ARR = [\"True\", \"False\"];\n\nexport const QUERY_OPTIONS = {\n  launchYear: \"launch_year\",\n  launchSuccess: \"launch_success\",\n  landSuccess: \"land_success\",\n};\n\nexport const BASE_URL = \"https://api.spaceXdata.com/v3/launches?limit=100\";\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport FilterOption from \"./Filter-Option\";\nimport { BOOLEAN_FILTER_ARR, QUERY_OPTIONS, BASE_URL } from \"../App.constant\";\n\nconst Card = styled.div`\n  background-color: white;\n  border-radius: 5px;\n  width: 300px;\n`;\nconst CardHeader = styled.h3`\n  margin-left: 10px;\n`;\nconst CardSubHeader = styled.h5`\n  margin: 10px;\n  text-decoration: underline;\n  text-align: center;\n`;\nconst Filter = (props) => {\n  const [launchArr, setLaunchArr] = useState([]);\n  const [selectedFilters, setSelectedFilters] = useState({});\n\n  useEffect(() => {\n    const tempLaunchArr = [];\n    for (let i = 2006; i <= 2020; i++) {\n      tempLaunchArr.push(i);\n    }\n    setLaunchArr(tempLaunchArr);\n  }, []);\n\n  const constructAPIUrl = (filters) => {\n    if (filters) {\n      let queryStr = \"\";\n      for (const key in filters) {\n        if (filters.hasOwnProperty(key)) {\n          queryStr += `&${key}=${filters[key]}`;\n        }\n      }\n      return `${BASE_URL}${queryStr}`;\n    }\n  };\n\n  const handleFilterChange = (data) => {\n    if (data) {\n      const combineObj = Object.assign(selectedFilters, data);\n      setSelectedFilters(combineObj);\n      const url = constructAPIUrl(selectedFilters);\n      fetch(url)\n        .then((res) => res.json())\n        .then((json) => {\n          props.onChange(json);\n        });\n    }\n  };\n  return (\n    <Card>\n      <CardHeader>Filters</CardHeader>\n      <CardSubHeader>Launch Year</CardSubHeader>\n      <FilterOption\n        arr={launchArr}\n        query={QUERY_OPTIONS.launchYear}\n        onChange={handleFilterChange}\n      />\n      <CardSubHeader>Successful Launch</CardSubHeader>\n      <FilterOption\n        arr={BOOLEAN_FILTER_ARR}\n        query={QUERY_OPTIONS.launchSuccess}\n        onChange={handleFilterChange}\n      />\n      <CardSubHeader>Successful Landing</CardSubHeader>\n      <FilterOption\n        arr={BOOLEAN_FILTER_ARR}\n        query={QUERY_OPTIONS.landSuccess}\n        onChange={handleFilterChange}\n      />\n    </Card>\n  );\n};\nexport default Filter;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Filter from \"./Filter\";\n\nconst Wrapper = styled.div`\n  background-color: lightgrey;\n  padding: 30px;\n`;\nconst PageHeader = styled.h3`\n  margin-left: 10px;\n`;\n\nconst Homepage = () => {\n  const [respArr, setRespArr] = useState([]);\n  const handleCardArr = (arr) => {\n    setRespArr(respArr);\n  };\n  return (\n    <Wrapper>\n      <PageHeader> SpaceX Launch Programs</PageHeader>\n      <Filter onChange={handleCardArr} />\n    </Wrapper>\n  );\n};\nexport default Homepage;\n","import React from \"react\";\nimport \"./App.css\";\nimport HomePage from \"./components/HomePage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}